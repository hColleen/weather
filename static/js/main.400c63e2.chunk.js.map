{"version":3,"sources":["components/Title.js","components/Weather.js","components/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Component","Weather","props","city","country","temperature","humidity","description","icon","concat","error","forecastApi","API_KEY","FiveDay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getForecast","asyncToGenerator","regenerator_default","mark","_callee","api_call","data","temp","timestamp","dateArray","i","_i","date","options","wrap","_context","prev","next","fetch","sent","json","list","length","push","main","weather","id","dt","Date","weekday","month","toLocaleString","console","log","setState","graphData","labels","datasets","label","backgroundColor","stop","state","_this2","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","es","title","display","displayTitle","legend","displayLegend","defaultProps","displayLabel","api","App","undefined","getWeather","name","sys","Title_Title","components_Weather","Forecast_FiveDay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.400c63e2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Title extends Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1 className=\"title-container__title\">L<i className =\"wi wi-day-sunny\"></i>ca<i className = \"wi wi-thermometer\"></i> Weather</h1>\r\n        </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\"> Location: <span className=\"weather__value\"> {props.city}, {props.country}</span></p>\r\n        }\r\n        {\r\n            props.temperature && <p className=\"weather__key\"> Temperature: <span className=\"weather__value\"> {props.temperature} &#8451;</span></p>\r\n        }\r\n        {\r\n            props.humidity && <p className=\"weather__key\"> Humidity:<span className=\"weather__value\"> {props.humidity}% </span></p>\r\n        }\r\n        {\r\n            props.description && <p className=\"weather__key\"> Conditions:<span className=\"weather__value\"> {props.description} </span></p>\r\n        }\r\n        {\r\n            props.icon && <p className=\"weather__key\"><i className = {`wi wi-owm-${props.icon}`}></i></p>\r\n        }\r\n        {\r\n            props.error && <p className=\"weather__error\">{props.error}</p>\r\n        }\r\n    </div>\r\n)\r\n\r\nexport default Weather;","import React, { Component } from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nlet forecastApi = \"https://api.openweathermap.org/data/2.5/forecast?\"\r\nconst API_KEY = \"a1a849c982e707bbf6fa3890ce6a7add\"\r\n\r\nexport default class FiveDay extends Component{\r\n\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      graphData: {}\r\n    }\r\n  }\r\n  static defaultProps = {\r\n    displayTitle: false,\r\n    displayLegend: false,\r\n    displayLabel: false\r\n  }\r\n  \r\n  \r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => {\r\n          forecastApi += `lat=${position.coords.latitude}&lon=${position.coords.longitude}`\r\n          this.getForecast(forecastApi)\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  getForecast = async () => {\r\n    const api_call = await fetch(`${forecastApi}&appid=${API_KEY}&units=metric`)\r\n    const data = await api_call.json()\r\n    let temp = [], icon = [], timestamp =[], dateArray = []\r\n    for (let i = 0; i < data.list.length; i++){\r\n      temp.push(data.list[i].main.temp)\r\n      icon.push(data.list[i].weather[0].id)\r\n      timestamp.push(data.list[i].dt)\r\n    }\r\n    for (let i = 0; i < timestamp.length; i ++){\r\n      let date = new Date(timestamp[i] * 1000)\r\n      let options = { weekday: 'short', month: 'short'}\r\n      dateArray.push(date.toLocaleString(options))\r\n    }\r\n    console.log(dateArray)\r\n    this.setState({\r\n      graphData:{\r\n    labels: dateArray,\r\n    datasets:[\r\n      {\r\n      label: '',\r\n      data: temp,\r\n      backgroundColor:['#001233']\r\n      }\r\n    ]\r\n  }\r\n  })\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n     <div className = \"forecast_graph\">\r\n      <h3 className = \"forecast_title\">Five Day Forecast</h3>\r\n      <Line \r\n        data = {this.state.graphData}\r\n        options = {{\r\n          title: {\r\n            display: this.props.displayTitle\r\n          },\r\n          legend:{\r\n            display: this.props.displayLegend\r\n          }\r\n        }}\r\n      />\r\n     </div> \r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\nimport './App.css'\nimport Title from './components/Title'\nimport Weather from './components/Weather'\nimport FiveDay from './components/Forecast';\n\n\nconst API_KEY = \"a1a849c982e707bbf6fa3890ce6a7add\"\nlet api = \"https://api.openweathermap.org/data/2.5/weather?\"\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: undefined,\n    error: undefined\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          api += `lat=${position.coords.latitude}&lon=${position.coords.longitude}`\n          this.getWeather(api)\n        }\n      )\n    }\n  }\n\n  getWeather = async () => {\n    const api_call = await fetch(`${api}&appid=${API_KEY}&units=metric`)\n    const data = await api_call.json()\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      icon: data.weather[0].id,\n      error: ''\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-5 title-container\">\n                <Title />\n              </div>\n              <div className=\"col-7 form-container\">\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  icon={this.state.icon}\n                  error={this.state.error}\n                />\n                <FiveDay />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/* Tutorials from here:\nhttps://stackoverflow.com/questions/51952341/how-do-i-get-users-location-via-navigator-geolocation-before-my-fetch-executes\nhttps://www.youtube.com/watch?v=204C9yNeOYI\nhttps://stackoverflow.com/questions/32230635/passing-in-class-names-to-react-components\nhttps://www.youtube.com/watch?v=Ly-9VTXJlnA\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}