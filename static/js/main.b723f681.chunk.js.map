{"version":3,"sources":["components/Title.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Component","Weather","props","city","country","temperature","humidity","description","icon","concat","error","API_KEY","api","App","state","undefined","getWeather","_callee","api_call","data","regenerator_default","wrap","_context","prev","next","fetch","sent","json","_this","setState","main","temp","name","sys","weather","id","stop","this","_this2","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Title_Title","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b723f681.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Title extends Component{\r\n    render(){\r\n        return(\r\n        <div>\r\n            <h1 className=\"title-container__title\">L<i className =\"wi wi-day-sunny\"></i>ca<i className = \"wi wi-thermometer\"></i> Weather</h1>\r\n        </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        {\r\n            props.city && props.country && <p className=\"weather__key\"> Location: <span className=\"weather__value\"> {props.city}, {props.country}</span></p>\r\n        }\r\n        {\r\n            props.temperature && <p className=\"weather__key\"> Temperature: <span className=\"weather__value\"> {props.temperature} &#8451;</span></p>\r\n        }\r\n        {\r\n            props.humidity && <p className=\"weather__key\"> Humidity:<span className=\"weather__value\"> {props.humidity}% </span></p>\r\n        }\r\n        {\r\n            props.description && <p className=\"weather__key\"> Conditions:<span className=\"weather__value\"> {props.description} </span></p>\r\n        }\r\n        {\r\n            props.icon && <p className=\"weather__key\"><i className = {`wi wi-owm-${props.icon}`}></i></p>\r\n        }\r\n        {\r\n            props.error && <p className=\"weather__error\">{props.error}</p>\r\n        }\r\n    </div>\r\n)\r\n\r\nexport default Weather;","import React, { Component } from 'react'\nimport './App.css'\nimport Title from './components/Title'\nimport Weather from './components/Weather'\n\n\nconst API_KEY = \"a1a849c982e707bbf6fa3890ce6a7add\"\nlet api = \"https://api.openweathermap.org/data/2.5/weather?\"\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: undefined,\n    error: undefined\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          api += `lat=${position.coords.latitude}&lon=${position.coords.longitude}`\n          this.getWeather(api)\n        }\n      )\n    }\n  }\n\n  getWeather = async () => {\n    const api_call = await fetch(`${api}&appid=${API_KEY}&units=metric`)\n    const data = await api_call.json()\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      icon: data.weather[0].id,\n      error: ''\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-5 title-container\">\n                <Title />\n              </div>\n              <div className=\"col-7 form-container\">\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  icon={this.state.icon}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/* Tutorials from here:\nhttps://stackoverflow.com/questions/51952341/how-do-i-get-users-location-via-navigator-geolocation-before-my-fetch-executes\nhttps://www.youtube.com/watch?v=204C9yNeOYI\nhttps://stackoverflow.com/questions/32230635/passing-in-class-names-to-react-components\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}